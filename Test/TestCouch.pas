unit TestCouch;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, IdHttp, System.Generics.Collections, superobject, Couch,
  System.SysUtils, System.Classes;

type
  // Test methods for class TCouchDB

  TestTCouchDB = class(TTestCase)
  strict private
    FCouchDB: TCouchDB;
    Fctx: TSuperRttiContext;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestAutoFlushBulk;
    procedure TestCreateDatabase;
    procedure TestDeleteDatabase;
    procedure TestFlushBulk;
    procedure TestFlushBulkManyDBs;
    procedure TestGetDocument;
    function TestSaveDocument: string;
  end;

implementation

procedure TestTCouchDB.SetUp;
begin
  FCouchDB := TCouchDB.Create;
  Fctx := TSuperRttiContext.Create;

  FCouchDB.CreateDatabase('test');
end;

procedure TestTCouchDB.TearDown;
begin
  FCouchDB.DeleteDatabase('test');
  FCouchDB.Free;
  FCouchDB := nil;
  Fctx.Free;
end;

procedure TestTCouchDB.TestAutoFlushBulk;
begin
  Assert(true = false, 'Test missing');
end;

procedure TestTCouchDB.TestCreateDatabase;
var
  ReturnValue: Boolean;
begin
  // first insert should always fail because test is created on setup
  ReturnValue := FCouchDB.CreateDatabase('test');
  Assert(ReturnValue = false, 'Failed to throw error on database present');

  // create another database
  ReturnValue := FCouchDB.CreateDatabase('test-another');
  Assert(ReturnValue = true, 'Failed to create database');

  // just cleanup here
  FCouchDB.DeleteDatabase('test-another');
end;

procedure TestTCouchDB.TestDeleteDatabase;
var
  ReturnValue: boolean;
begin
  ReturnValue := FCouchDB.DeleteDatabase('database-should-not-exist');
  Assert(ReturnValue = false, 'Wrong database delation should trigger exception');
end;

procedure TestTCouchDB.TestFlushBulk;
var
  doc1, doc2: TCouchDBDocument;
  hasPassed: boolean;
  ReturnValue: TCouchDBDocument;
begin
  FCouchDB.useBulkInserts := true;
  doc1 := TCouchDBDocument.CreateNew('first-document');
  doc2 := TCouchDBDocument.CreateNew('second-document');

  // expect first save to do nothing
  hasPassed := false;
  FCouchDB.SaveDocument<TCouchDBDocument>(doc1, 'test');
  try
    FCouchDB.GetDocument<TCouchDBDocument>('test', 'first-document');
  except
    on ECouchErrorDocNotFound do begin
      hasPassed := true;
    end;
  end;
  Assert(hasPassed = true, 'Document should not have been written to database');

  // flush bulk and expect to retrieve the document
  FCouchDB.FlushBulk;
  ReturnValue := FCouchDB.GetDocument<TCouchDBDocument>('test', 'first-document');
  Assert(ReturnValue._id = 'first-document', 'Invalid document saved in bulk');
end;

procedure TestTCouchDB.TestFlushBulkManyDBs;
begin
  Assert(true = false, 'Test missing');
end;

procedure TestTCouchDB.TestGetDocument;
var
  ReturnValue: TCouchDBDocument;
  documentId: string;
  databaseName: string;
//  json: ISuperObject;
  testPass: Boolean;
begin
  // expect retrieving a document that doesn't exist to trigger an exception
  // that NEEDS to be handled appropriately on each case
  databaseName := 'this-should-not-exist';
  documentId := '';
  testPass := false;
  try
    FCouchDB.GetDocument<TCouchDBDocument>(databaseName, documentId);
  except
    on ECouchErrorDocNotFound do begin
      testPass := true;
    end;
  end;
  // return value after exception is garbage
//  json := Fctx.AsJson<TCouchDBDocument>(ReturnValue);
  Assert(testPass = true, 'Call to non existent document should return nil');
end;

function TestTCouchDB.TestSaveDocument: string;
var
  ReturnValue: boolean;
  doc: TCouchDBDocument;
begin
  // expect empty document to be created
  doc := TCouchDBDocument.CreateNew;
  ReturnValue := FCouchDB.SaveDocument<TCouchDBDocument>(doc, 'test');

  Assert(ReturnValue = true, 'Document save failed');
  //
  // TODO -cMM: TestTCouchDB.TestSaveDocument default body inserted
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTCouchDB.Suite);
end.

